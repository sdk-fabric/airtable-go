
// TablesTag automatically generated by SDKgen please do not edit this file manually
// @see https://sdkgen.app



import (
    "bytes"
    "encoding/json"
    "errors"
    "fmt"
    
    "io"
    "net/http"
    "net/url"
    
)

type TablesTag struct {
    internal *sdkgen.TagAbstract
}



// Create Creates a new table and returns the schema for the newly created table.
func (client *TablesTag) Create(baseId string, payload Table) (Table, error) {
    pathParams := make(map[string]interface{})
    pathParams["baseId"] = baseId

    queryParams := make(map[string]interface{})

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/v0/meta/bases/:baseId/tables", pathParams))
    if err != nil {
        return Table{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()

    raw, err := json.Marshal(payload)
    if err != nil {
        return Table{}, err
    }

    var reqBody = bytes.NewReader(raw)

    req, err := http.NewRequest("POST", u.String(), reqBody)
    if err != nil {
        return Table{}, err
    }

    req.Header.Set("Content-Type", "application/json")

    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return Table{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return Table{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var data Table
        err := json.Unmarshal(respBody, &data)

        return data, err
    }

    var statusCode = resp.StatusCode
    if statusCode == 400 {
        var data Error
        err := json.Unmarshal(respBody, &data)

        return Table{}, &ErrorException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 403 {
        var data Error
        err := json.Unmarshal(respBody, &data)

        return Table{}, &ErrorException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 404 {
        var data Error
        err := json.Unmarshal(respBody, &data)

        return Table{}, &ErrorException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 500 {
        var data Error
        err := json.Unmarshal(respBody, &data)

        return Table{}, &ErrorException{
            Payload: data,
            Previous: err,
        }
    }

    return Table{}, errors.New(fmt.Sprint("The server returned an unknown status code: ", statusCode))
}

// Update Updates the name and/or description of a table. At least one of name or description must be specified.
func (client *TablesTag) Update(baseId string, tableIdOrName string, payload Table) (Table, error) {
    pathParams := make(map[string]interface{})
    pathParams["baseId"] = baseId
    pathParams["tableIdOrName"] = tableIdOrName

    queryParams := make(map[string]interface{})

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/v0/meta/bases/:baseId/tables/:tableIdOrName", pathParams))
    if err != nil {
        return Table{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()

    raw, err := json.Marshal(payload)
    if err != nil {
        return Table{}, err
    }

    var reqBody = bytes.NewReader(raw)

    req, err := http.NewRequest("PATCH", u.String(), reqBody)
    if err != nil {
        return Table{}, err
    }

    req.Header.Set("Content-Type", "application/json")

    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return Table{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return Table{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var data Table
        err := json.Unmarshal(respBody, &data)

        return data, err
    }

    var statusCode = resp.StatusCode
    if statusCode == 400 {
        var data Error
        err := json.Unmarshal(respBody, &data)

        return Table{}, &ErrorException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 403 {
        var data Error
        err := json.Unmarshal(respBody, &data)

        return Table{}, &ErrorException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 404 {
        var data Error
        err := json.Unmarshal(respBody, &data)

        return Table{}, &ErrorException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 500 {
        var data Error
        err := json.Unmarshal(respBody, &data)

        return Table{}, &ErrorException{
            Payload: data,
            Previous: err,
        }
    }

    return Table{}, errors.New(fmt.Sprint("The server returned an unknown status code: ", statusCode))
}




func NewTablesTag(httpClient *http.Client, parser *sdkgen.Parser) *TablesTag {
	return &TablesTag{
        internal: &sdkgen.TagAbstract{
            HttpClient: httpClient,
            Parser: parser,
        },
	}
}
